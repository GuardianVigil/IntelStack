from typing import Dict
from .base import BasePlatform

class MalwareBazaarClient(BasePlatform):
    """Client for interacting with MalwareBazaar API."""

    def __init__(self, api_key: str):
        super().__init__(api_key)
        self.base_url = "https://mb-api.abuse.ch/api/v1"

    async def analyze_hash(self, file_hash: str) -> Dict:
        """
        Search for a file hash in MalwareBazaar database.
        
        Args:
            file_hash: MD5, SHA-1, or SHA-256 hash to analyze
            
        Returns:
            Dict containing the analysis results
        """
        headers = {
            "API-KEY": self.api_key,
            "Content-Type": "application/x-www-form-urlencoded"
        }

        data = {
            "query": "get_info",
            "hash": file_hash
        }

        response = await self._make_request("POST", self.base_url, headers=headers, params=data)
        
        if "error" in response:
            return response

        try:
            if response.get("query_status") == "ok":
                data = response.get("data", [])
                if data:
                    sample = data[0]  # Get the first match
                    return {
                        "platform": "malwarebazaar",
                        "found": True,
                        "scan_results": {
                            "sha256_hash": sample.get("sha256_hash"),
                            "sha1_hash": sample.get("sha1_hash"),
                            "md5_hash": sample.get("md5_hash"),
                            "file_name": sample.get("file_name"),
                            "file_size": sample.get("file_size"),
                            "file_type": sample.get("file_type"),
                            "first_seen": sample.get("first_seen"),
                            "last_seen": sample.get("last_seen"),
                            "signature": sample.get("signature"),
                            "imphash": sample.get("imphash"),
                            "tlsh": sample.get("tlsh"),
                            "reporter": sample.get("reporter"),
                            "tags": sample.get("tags", []),
                            "intelligence": {
                                "vendor_intel": sample.get("vendor_intel", {}),
                                "file_information": sample.get("file_information", {}),
                                "yara_rules": sample.get("yara_rules", [])
                            }
                        }
                    }
                else:
                    return {
                        "platform": "malwarebazaar",
                        "found": False,
                        "message": "Hash not found in MalwareBazaar database"
                    }
            else:
                return {
                    "error": f"Query failed: {response.get('query_status')}"
                }
        except Exception as e:
            return {"error": f"Failed to parse MalwareBazaar response: {str(e)}"}
